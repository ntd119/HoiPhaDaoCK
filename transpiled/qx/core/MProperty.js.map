{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "set",
    "data",
    "value",
    "setter",
    "core",
    "Property",
    "$$method",
    "isString",
    "firstUp",
    "undefined",
    "Error",
    "prop",
    "get",
    "getter",
    "reset",
    "resetter",
    "isPropertyInitialized",
    "Assert",
    "assertString",
    "MProperty"
  ],
  "sources": [
    "C:/Users/admin/PycharmProjects/hoiphadaock/node_modules/@qooxdoo/framework/source/class/qx/core/MProperty.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This mixin offers the basic property features which include generic\n * setter, getter and resetter.\n */\nqx.Mixin.define(\"qx.core.MProperty\", {\n  members: {\n    /**\n     * Sets either multiple properties at once by using a property list or\n     * sets one property and its value by the first and second argument.\n     * As a fallback, if no generated property setter could be found, a\n     * handwritten setter will be searched and invoked if available.\n     *\n     * @param data {Object | String} a map of property values. The key is the name of the property.\n     * @param value {var?} the value, only used when <code>data</code> is a string.\n     * @return {Object} Returns this instance if <code>data</code> is a map\n     *   or a non-generated setter is called; otherwise returns <code>value</code>.\n     * @throws {Error} if a property defined does not exist\n     */\n    set(data, value) {\n      var setter = qx.core.Property.$$method.set;\n\n      if (qx.Bootstrap.isString(data)) {\n        if (!this[setter[data]]) {\n          if (this[\"set\" + qx.Bootstrap.firstUp(data)] != undefined) {\n            this[\"set\" + qx.Bootstrap.firstUp(data)](value);\n            return this;\n          }\n\n          throw new Error(\"No such property: \" + data);\n        }\n\n        return this[setter[data]](value);\n      } else {\n        for (var prop in data) {\n          if (!this[setter[prop]]) {\n            if (this[\"set\" + qx.Bootstrap.firstUp(prop)] != undefined) {\n              this[\"set\" + qx.Bootstrap.firstUp(prop)](data[prop]);\n              continue;\n            }\n\n            throw new Error(\"No such property: \" + prop);\n          }\n\n          this[setter[prop]](data[prop]);\n        }\n\n        return this;\n      }\n    },\n\n    /**\n     * Returns the value of the given property. If no generated getter could be\n     * found, a fallback tries to access a handwritten getter.\n     *\n     * @param prop {String} Name of the property.\n     * @return {var} The value of the value\n     * @throws {Error} if a property defined does not exist\n     */\n    get(prop) {\n      var getter = qx.core.Property.$$method.get;\n\n      if (!this[getter[prop]]) {\n        if (this[\"get\" + qx.Bootstrap.firstUp(prop)] != undefined) {\n          return this[\"get\" + qx.Bootstrap.firstUp(prop)]();\n        }\n\n        throw new Error(\"No such property: \" + prop);\n      }\n\n      return this[getter[prop]]();\n    },\n\n    /**\n     * Resets the value of the given property. If no generated resetter could be\n     * found, a handwritten resetter will be invoked, if available.\n     *\n     * @param prop {String} Name of the property.\n     * @throws {Error} if a property defined does not exist\n     */\n    reset(prop) {\n      var resetter = qx.core.Property.$$method.reset;\n\n      if (!this[resetter[prop]]) {\n        if (this[\"reset\" + qx.Bootstrap.firstUp(prop)] != undefined) {\n          this[\"reset\" + qx.Bootstrap.firstUp(prop)]();\n          return;\n        }\n\n        throw new Error(\"No such property: \" + prop);\n      }\n\n      this[resetter[prop]]();\n    },\n\n    /**\n     * Checks if the property is initialized, i.e. has a defined init value or\n     * has got a value by a setter method.\n     *\n     * @param prop {String} Name of the property\n     * @return {Boolean} If the property is initialized\n     * @throws {Error} If the property defined does not exist\n     */\n    isPropertyInitialized(prop) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(prop);\n\n        if (!this[\"get\" + qx.Bootstrap.firstUp(prop)]) {\n          throw new Error(\"No such property: \" + prop);\n        }\n      }\n\n      return (\n        this[\"$$user_\" + prop] !== undefined ||\n        this[\"$$init_\" + prop] !== undefined\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}