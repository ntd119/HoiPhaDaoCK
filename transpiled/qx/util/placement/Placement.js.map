{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__defaultAxis",
    "util",
    "placement",
    "DirectAxis",
    "properties",
    "axisX",
    "check",
    "axisY",
    "edge",
    "init",
    "align",
    "statics",
    "__instance",
    "compute",
    "size",
    "area",
    "target",
    "offsets",
    "position",
    "modeX",
    "modeY",
    "Placement",
    "splitted",
    "split",
    "expected",
    "Assert",
    "assertEquals",
    "set",
    "__getAxis",
    "__direct",
    "__keepAlign",
    "__bestFit",
    "mode",
    "KeepAlignAxis",
    "BestFitAxis",
    "Error",
    "members",
    "assertObject",
    "assertNumber",
    "width",
    "height",
    "top",
    "right",
    "bottom",
    "left",
    "getAxisX",
    "computeStart",
    "start",
    "end",
    "__getPositionX",
    "getAxisY",
    "__getPositionY",
    "getEdge",
    "getAlign",
    "destruct",
    "_disposeObjects"
  ],
  "sources": [
    "C:/Users/admin/PycharmProjects/hoiphadaock/node_modules/@qooxdoo/framework/source/class/qx/util/placement/Placement.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Contains methods to compute a position for any object which should\n * be positioned relative to another object.\n */\nqx.Class.define(\"qx.util.placement.Placement\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n    this.__defaultAxis = qx.util.placement.DirectAxis;\n  },\n\n  properties: {\n    /**\n     * The axis object to use for the horizontal placement\n     */\n    axisX: {\n      check: \"Class\"\n    },\n\n    /**\n     * The axis object to use for the vertical placement\n     */\n    axisY: {\n      check: \"Class\"\n    },\n\n    /**\n     * Specify to which edge of the target object, the object should be attached\n     */\n    edge: {\n      check: [\"top\", \"right\", \"bottom\", \"left\"],\n      init: \"top\"\n    },\n\n    /**\n     * Specify with which edge of the target object, the object should be aligned\n     */\n    align: {\n      check: [\"top\", \"right\", \"bottom\", \"left\", \"center\", \"middle\"],\n      init: \"right\"\n    }\n  },\n\n  statics: {\n    __instance: null,\n\n    /**\n     * DOM and widget independent method to compute the location\n     * of an object to make it relative to any other object.\n     *\n     * @param size {Map} With the keys <code>width</code> and <code>height</code>\n     *   of the object to align\n     * @param area {Map} Available area to position the object. Has the keys\n     *   <code>width</code> and <code>height</code>. Normally this is the parent\n     *   object of the one to align.\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     *   and <code>bottom</code>.\n     * @param offsets {Map} Map with all offsets for each direction.\n     *   Comes with the keys <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code>.\n     * @param position {String} Alignment of the object on the target, any of\n     *   \"top-left\", \"top-center\", \"top-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\",\n     *   \"left-top\", \"left-middle\", \"left-bottom\", \"right-top\", \"right-middle\", \"right-bottom\".\n     * @param modeX {String} Horizontal placement mode. Valid values are:\n     *   <ul>\n     *   <li><code>direct</code>: place the object directly at the given\n     *   location.</li>\n     *   <li><code>keep-align</code>: if parts of the object is outside of the visible\n     *   area it is moved to the best fitting 'edge' and 'alignment' of the target.\n     *   It is guaranteed the the new position attaches the object to one of the\n     *   target edges and that that is aligned with a target edge.</li>\n     *   <li>best-fit</li>: If parts of the object are outside of the visible\n     *   area it is moved into the view port ignoring any offset, and position\n     *   values.\n     *   </ul>\n     * @param modeY {String} Vertical placement mode. Accepts the same values as\n     *   the 'modeX' argument.\n     * @return {Map} A map with the final location stored in the keys\n     *   <code>left</code> and <code>top</code>.\n     */\n    compute(size, area, target, offsets, position, modeX, modeY) {\n      this.__instance = this.__instance || new qx.util.placement.Placement();\n\n      var splitted = position.split(\"-\");\n      var edge = splitted[0];\n      var align = splitted[1];\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (align === \"center\" || align === \"middle\") {\n          var expected = \"middle\";\n          if (edge === \"top\" || edge === \"bottom\") {\n            expected = \"center\";\n          }\n          qx.core.Assert.assertEquals(\n            expected,\n            align,\n            \"Please use '\" + edge + \"-\" + expected + \"' instead!\"\n          );\n        }\n      }\n\n      this.__instance.set({\n        axisX: this.__getAxis(modeX),\n        axisY: this.__getAxis(modeY),\n        edge: edge,\n        align: align\n      });\n\n      return this.__instance.compute(size, area, target, offsets);\n    },\n\n    __direct: null,\n    __keepAlign: null,\n    __bestFit: null,\n\n    /**\n     * Get the axis implementation for the given mode\n     *\n     * @param mode {String} One of <code>direct</code>, <code>keep-align</code> or\n     *   <code>best-fit</code>\n     * @return {qx.util.placement.AbstractAxis}\n     */\n    __getAxis(mode) {\n      switch (mode) {\n        case \"direct\":\n          this.__direct = this.__direct || qx.util.placement.DirectAxis;\n          return this.__direct;\n\n        case \"keep-align\":\n          this.__keepAlign =\n            this.__keepAlign || qx.util.placement.KeepAlignAxis;\n          return this.__keepAlign;\n\n        case \"best-fit\":\n          this.__bestFit = this.__bestFit || qx.util.placement.BestFitAxis;\n          return this.__bestFit;\n\n        default:\n          throw new Error(\"Invalid 'mode' argument!'\");\n      }\n    }\n  },\n\n  members: {\n    __defaultAxis: null,\n\n    /**\n     * DOM and widget independent method to compute the location\n     * of an object to make it relative to any other object.\n     *\n     * @param size {Map} With the keys <code>width</code> and <code>height</code>\n     *   of the object to align\n     * @param area {Map} Available area to position the object. Has the keys\n     *   <code>width</code> and <code>height</code>. Normally this is the parent\n     *   object of the one to align.\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     *   and <code>bottom</code>.\n     * @param offsets {Map} Map with all offsets for each direction.\n     *   Comes with the keys <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code>.\n     * @return {Map} A map with the final location stored in the keys\n     *   <code>left</code> and <code>top</code>.\n     */\n    compute(size, area, target, offsets) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertObject(size, \"size\");\n        this.assertNumber(size.width, \"size.width\");\n        this.assertNumber(size.height, \"size.height\");\n\n        this.assertObject(area, \"area\");\n        this.assertNumber(area.width, \"area.width\");\n        this.assertNumber(area.height, \"area.height\");\n\n        this.assertObject(target, \"target\");\n        this.assertNumber(target.top, \"target.top\");\n        this.assertNumber(target.right, \"target.right\");\n        this.assertNumber(target.bottom, \"target.bottom\");\n        this.assertNumber(target.left, \"target.left\");\n\n        this.assertObject(offsets, \"offsets\");\n        this.assertNumber(offsets.top, \"offsets.top\");\n        this.assertNumber(offsets.right, \"offsets.right\");\n        this.assertNumber(offsets.bottom, \"offsets.bottom\");\n        this.assertNumber(offsets.left, \"offsets.left\");\n      }\n\n      var axisX = this.getAxisX() || this.__defaultAxis;\n      var left = axisX.computeStart(\n        size.width,\n        { start: target.left, end: target.right },\n        { start: offsets.left, end: offsets.right },\n        area.width,\n        this.__getPositionX()\n      );\n\n      var axisY = this.getAxisY() || this.__defaultAxis;\n      var top = axisY.computeStart(\n        size.height,\n        { start: target.top, end: target.bottom },\n        { start: offsets.top, end: offsets.bottom },\n        area.height,\n        this.__getPositionY()\n      );\n\n      return {\n        left: left,\n        top: top\n      };\n    },\n\n    /**\n     * Get the position value for the horizontal axis\n     *\n     * @return {String} the position\n     */\n    __getPositionX() {\n      var edge = this.getEdge();\n      var align = this.getAlign();\n\n      if (edge == \"left\") {\n        return \"edge-start\";\n      } else if (edge == \"right\") {\n        return \"edge-end\";\n      } else if (align == \"left\") {\n        return \"align-start\";\n      } else if (align == \"center\") {\n        return \"align-center\";\n      } else if (align == \"right\") {\n        return \"align-end\";\n      }\n    },\n\n    /**\n     * Get the position value for the vertical axis\n     *\n     * @return {String} the position\n     */\n    __getPositionY() {\n      var edge = this.getEdge();\n      var align = this.getAlign();\n\n      if (edge == \"top\") {\n        return \"edge-start\";\n      } else if (edge == \"bottom\") {\n        return \"edge-end\";\n      } else if (align == \"top\") {\n        return \"align-start\";\n      } else if (align == \"middle\") {\n        return \"align-center\";\n      } else if (align == \"bottom\") {\n        return \"align-end\";\n      }\n    }\n  },\n\n  destruct() {\n    this._disposeObjects(\"__defaultAxis\");\n  }\n});\n"
  ],
  "mappings": "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"
}