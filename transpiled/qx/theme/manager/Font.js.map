{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "util",
    "ValueManager",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "$$fontBootstrap",
    "_manifestFonts",
    "properties",
    "theme",
    "check",
    "nullable",
    "apply",
    "event",
    "members",
    "resolveDynamic",
    "value",
    "dynamic",
    "_dynamic",
    "bom",
    "Font",
    "resolve",
    "cache",
    "resolved",
    "getTheme",
    "fonts",
    "font",
    "__getFontClass",
    "fo",
    "comparisonString",
    "setComparisonString",
    "set",
    "__warnedMissingFonts",
    "debug",
    "Object",
    "keys",
    "join",
    "isDynamic",
    "undefined",
    "__resolveInclude",
    "fontName",
    "include",
    "fontToInclude",
    "lang",
    "mergeWith",
    "_applyTheme",
    "dest",
    "key",
    "themed",
    "dispose",
    "source",
    "assign",
    "_setDynamic",
    "config",
    "sources",
    "webfonts",
    "WebFont",
    "destruct",
    "_disposeMap",
    "manager"
  ],
  "sources": [
    "C:/Users/admin/PycharmProjects/hoiphadaock/node_modules/@qooxdoo/framework/source/class/qx/theme/manager/Font.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Manager for font themes\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @ignore(qx.$$fontBootstrap)\n */\nqx.Class.define(\"qx.theme.manager.Font\", {\n  type: \"singleton\",\n  extend: qx.util.ValueManager,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    // Grab bootstrap info\n    if (qx.$$fontBootstrap) {\n      this._manifestFonts = qx.$$fontBootstrap;\n      delete qx.$$fontBootstrap;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** the currently selected font theme */\n    theme: {\n      check: \"Theme\",\n      nullable: true,\n      apply: \"_applyTheme\",\n      event: \"changeTheme\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    _manifestFonts: null,\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {var} return the (translated) result of the incoming value\n     */\n    resolveDynamic(value) {\n      var dynamic = this._dynamic;\n      return value instanceof qx.bom.Font ? value : dynamic[value];\n    },\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value,\n     * (if available), otherwise returns the original value\n     * @param value {String} Value to resolve\n     * @return {var} either returns the (translated) result of the incoming\n     * value or the value itself\n     */\n    resolve(value) {\n      var cache = this._dynamic;\n      var resolved = cache[value];\n\n      if (resolved) {\n        return resolved;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && theme.fonts[value]) {\n        var font = this.__getFontClass(theme.fonts[value]);\n        var fo = new font();\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (theme.fonts[value].comparisonString) {\n          fo.setComparisonString(theme.fonts[value].comparisonString);\n        }\n\n        return (cache[value] = fo.set(theme.fonts[value]));\n      }\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (theme) {\n          if (!this.__warnedMissingFonts) {\n            this.__warnedMissingFonts = {};\n          }\n          if (!this.__warnedMissingFonts[value]) {\n            this.__warnedMissingFonts[value] = true;\n            this.debug(\n              `Cannot resolve a font named ${value} - available fonts are ${Object.keys(\n                theme.fonts\n              ).join(\", \")}`\n            );\n          }\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Whether a value is interpreted dynamically\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {Boolean} returns true if the value is interpreted dynamically\n     */\n    isDynamic(value) {\n      var cache = this._dynamic;\n\n      if (\n        value &&\n        (value instanceof qx.bom.Font || cache[value] !== undefined)\n      ) {\n        return true;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && value && theme.fonts[value]) {\n        var font = this.__getFontClass(theme.fonts[value]);\n        var fo = new font();\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (theme.fonts[value].comparisonString) {\n          fo.setComparisonString(theme.fonts[value].comparisonString);\n        }\n\n        cache[value] = fo.set(theme.fonts[value]);\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Checks for includes and resolves them recursively\n     *\n     * @param fonts {Map} all fonts of the theme\n     * @param fontName {String} font name to include\n     */\n    __resolveInclude(fonts, fontName) {\n      if (fonts[fontName].include) {\n        // get font infos out of the font theme\n        var fontToInclude = fonts[fonts[fontName].include];\n\n        // delete 'include' key - not part of the merge\n        fonts[fontName].include = null;\n        delete fonts[fontName].include;\n\n        fonts[fontName] = qx.lang.Object.mergeWith(\n          fonts[fontName],\n          fontToInclude,\n          false\n        );\n\n        this.__resolveInclude(fonts, fontName);\n      }\n    },\n\n    // apply method\n    _applyTheme(value) {\n      var dest = (this._dynamic = {});\n\n      for (var key in dest) {\n        if (dest[key].themed) {\n          dest[key].dispose();\n          delete dest[key];\n        }\n      }\n\n      if (value) {\n        var source = this._manifestFonts\n          ? Object.assign(value.fonts, this._manifestFonts)\n          : value.fonts;\n\n        for (var key in source) {\n          if (source[key].include && source[source[key].include]) {\n            this.__resolveInclude(source, key);\n          }\n\n          var font = this.__getFontClass(source[key]);\n          var fo = new font();\n\n          // Inject information about custom charcter set tests before we apply the\n          // complete blob in one.\n          if (source[key].comparisonString) {\n            fo.setComparisonString(source[key].comparisonString);\n          }\n\n          dest[key] = fo.set(source[key]);\n          dest[key].themed = true;\n        }\n      }\n      this._setDynamic(dest);\n    },\n\n    /**\n     * Decides which Font class should be used based on the theme configuration\n     *\n     * @param config {Map} The font's configuration map\n     * @return {Class}\n     */\n    __getFontClass(config) {\n      if (config.sources) {\n        return qx.bom.webfonts.WebFont;\n      }\n      return qx.bom.Font;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeMap(\"_dynamic\");\n  }\n});\n"
  ],
  "mappings": "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"
}