{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "fontFamily",
    "comparisonString",
    "fontWeight",
    "fontStyle",
    "setComparisonString",
    "setFontWeight",
    "setFontStyle",
    "setFontFamily",
    "__requestedHelpers",
    "_getRequestedHelpers",
    "statics",
    "COMPARISON_FONTS",
    "sans",
    "serif",
    "HELPER_CSS",
    "position",
    "margin",
    "padding",
    "top",
    "left",
    "fontSize",
    "width",
    "height",
    "lineHeight",
    "fontVariant",
    "visibility",
    "COMPARISON_STRING",
    "__defaultSizes",
    "__defaultHelpers",
    "removeDefaultHelperElements",
    "defaultHelpers",
    "bom",
    "webfonts",
    "Validator",
    "prop",
    "document",
    "body",
    "removeChild",
    "properties",
    "nullable",
    "init",
    "apply",
    "check",
    "timeout",
    "events",
    "changeStatus",
    "members",
    "__checkTimer",
    "__checkStarted",
    "validate",
    "Date",
    "getTime",
    "restart",
    "event",
    "Timer",
    "addListener",
    "__onTimerInterval",
    "once",
    "start",
    "_reset",
    "elem",
    "_isFontValid",
    "__init",
    "style",
    "requestedSans",
    "element",
    "Dimension",
    "getWidth",
    "requestedSerif",
    "cls",
    "fontsSans",
    "getFontFamily",
    "concat",
    "fontsSerif",
    "_getHelperElement",
    "getComparisonString",
    "styleMap",
    "lang",
    "clone",
    "join",
    "getFontWeight",
    "getFontStyle",
    "createElement",
    "innerHTML",
    "Style",
    "setStyles",
    "appendChild",
    "_applyFontFamily",
    "value",
    "old",
    "_applyFontWeight",
    "_applyFontStyle",
    "stop",
    "fireDataEvent",
    "family",
    "valid",
    "now",
    "getTimeout",
    "destruct",
    "removeListener",
    "_disposeObjects"
  ],
  "sources": [
    "C:/Users/admin/PycharmProjects/hoiphadaock/node_modules/@qooxdoo/framework/source/class/qx/bom/webfonts/Validator.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n/**\n * Checks whether a given font is available on the document and fires events\n * accordingly.\n *\n * This class does not need to be disposed, unless you want to abort the validation\n * early\n */\nqx.Class.define(\"qx.bom.webfonts.Validator\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param fontFamily {String} The name of the font to be verified\n   * @param comparisonString {String?} String to be used to detect whether a font was loaded or not\n   * @param fontWeight {String?} the weight of the font to be verified\n   * @param fontStyle {String?} the style of the font to be verified\n   * whether the font has loaded properly\n   */\n  construct(fontFamily, comparisonString, fontWeight, fontStyle) {\n    super();\n\n    if (comparisonString) {\n      this.setComparisonString(comparisonString);\n    }\n\n    if (fontWeight) {\n      this.setFontWeight(fontWeight);\n    }\n    if (fontStyle) {\n      this.setFontStyle(fontStyle);\n    }\n    if (fontFamily) {\n      this.setFontFamily(fontFamily);\n      this.__requestedHelpers = this._getRequestedHelpers();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Sets of serif and sans-serif fonts to be used for size comparisons.\n     * At least one of these fonts should be present on any system.\n     */\n    COMPARISON_FONTS: {\n      sans: [\"Arial\", \"Helvetica\", \"sans-serif\"],\n      serif: [\"Times New Roman\", \"Georgia\", \"serif\"]\n    },\n\n    /**\n     * Map of common CSS attributes to be used for all  size comparison elements\n     */\n    HELPER_CSS: {\n      position: \"absolute\",\n      margin: \"0\",\n      padding: \"0\",\n      top: \"-1000px\",\n      left: \"-1000px\",\n      fontSize: \"350px\",\n      width: \"auto\",\n      height: \"auto\",\n      lineHeight: \"normal\",\n      fontVariant: \"normal\",\n      visibility: \"hidden\"\n    },\n\n    /**\n     * The string to be used in the size comparison elements. This is the default string\n     * which is used for the {@link #COMPARISON_FONTS} and the font to be validated. It\n     * can be overridden for the font to be validated using the {@link #comparisonString}\n     * property.\n     */\n    COMPARISON_STRING: \"WEei\",\n    __defaultSizes: null,\n    __defaultHelpers: null,\n\n    /**\n     * Removes the two common helper elements used for all size comparisons from\n     * the DOM\n     */\n    removeDefaultHelperElements() {\n      var defaultHelpers = qx.bom.webfonts.Validator.__defaultHelpers;\n      if (defaultHelpers) {\n        for (var prop in defaultHelpers) {\n          document.body.removeChild(defaultHelpers[prop]);\n        }\n      }\n      delete qx.bom.webfonts.Validator.__defaultHelpers;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * The font-family this validator should check\n     */\n    fontFamily: {\n      nullable: true,\n      init: null,\n      apply: \"_applyFontFamily\"\n    },\n\n    /** The font weight to check */\n    fontWeight: {\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyFontWeight\"\n    },\n\n    /** The font style to check */\n    fontStyle: {\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyFontStyle\"\n    },\n\n    /**\n     * Comparison string used to check whether the font has loaded or not.\n     */\n    comparisonString: {\n      nullable: true,\n      init: null\n    },\n\n    /**\n     * Time in milliseconds from the beginning of the check until it is assumed\n     * that a font is not available\n     */\n    timeout: {\n      check: \"Integer\",\n      init: 5000\n    }\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when the status of a web font has been determined. The event data\n     * is a map with the keys \"family\" (the font-family name) and \"valid\"\n     * (Boolean).\n     */\n    changeStatus: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __requestedHelpers: null,\n    __checkTimer: null,\n    __checkStarted: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Validates the font\n     */\n    validate() {\n      this.__checkStarted = new Date().getTime();\n\n      if (this.__checkTimer) {\n        this.__checkTimer.restart();\n      } else {\n        this.__checkTimer = new qx.event.Timer(100);\n        this.__checkTimer.addListener(\"interval\", this.__onTimerInterval, this);\n        // Give the browser a chance to render the new elements\n        qx.event.Timer.once(\n          function () {\n            this.__checkTimer.start();\n          },\n          this,\n          0\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Removes the helper elements from the DOM\n     */\n    _reset() {\n      if (this.__requestedHelpers) {\n        for (var prop in this.__requestedHelpers) {\n          var elem = this.__requestedHelpers[prop];\n          document.body.removeChild(elem);\n        }\n        this.__requestedHelpers = null;\n      }\n    },\n\n    /**\n     * Checks if the font is available by comparing the widths of the elements\n     * using the generic fonts to the widths of the elements using the font to\n     * be validated\n     *\n     * @return {Boolean} Whether or not the font caused the elements to differ\n     * in size\n     */\n    _isFontValid() {\n      if (!qx.bom.webfonts.Validator.__defaultSizes) {\n        this.__init();\n      }\n\n      if (!this.__requestedHelpers) {\n        this.__requestedHelpers = this._getRequestedHelpers();\n      }\n\n      // force rerendering for chrome\n      this.__requestedHelpers.sans.style.visibility = \"visible\";\n      this.__requestedHelpers.sans.style.visibility = \"hidden\";\n      this.__requestedHelpers.serif.style.visibility = \"visible\";\n      this.__requestedHelpers.serif.style.visibility = \"hidden\";\n\n      var requestedSans = qx.bom.element.Dimension.getWidth(\n        this.__requestedHelpers.sans\n      );\n\n      var requestedSerif = qx.bom.element.Dimension.getWidth(\n        this.__requestedHelpers.serif\n      );\n\n      var cls = qx.bom.webfonts.Validator;\n      if (\n        requestedSans !== cls.__defaultSizes.sans ||\n        requestedSerif !== cls.__defaultSizes.serif\n      ) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Creates the two helper elements styled with the font to be checked\n     *\n     * @return {Map} A map with the keys <pre>sans</pre> and <pre>serif</pre>\n     * and the created span elements as values\n     */\n    _getRequestedHelpers() {\n      var fontsSans = [this.getFontFamily()].concat(\n        qx.bom.webfonts.Validator.COMPARISON_FONTS.sans\n      );\n\n      var fontsSerif = [this.getFontFamily()].concat(\n        qx.bom.webfonts.Validator.COMPARISON_FONTS.serif\n      );\n\n      return {\n        sans: this._getHelperElement(fontsSans, this.getComparisonString()),\n        serif: this._getHelperElement(fontsSerif, this.getComparisonString())\n      };\n    },\n\n    /**\n     * Creates a span element with the comparison text (either {@link #COMPARISON_STRING} or\n     * {@link #comparisonString}) and styled with the default CSS ({@link #HELPER_CSS}) plus\n     * the given font-family value and appends it to the DOM\n     *\n     * @param fontFamily {String} font-family string\n     * @param comparisonString {String?} String to be used to detect whether a font was loaded or not\n     * @return {Element} the created DOM element\n     */\n    _getHelperElement(fontFamily, comparisonString) {\n      var styleMap = qx.lang.Object.clone(qx.bom.webfonts.Validator.HELPER_CSS);\n      if (fontFamily) {\n        if (styleMap.fontFamily) {\n          styleMap.fontFamily += \",\" + fontFamily.join(\",\");\n        } else {\n          styleMap.fontFamily = fontFamily.join(\",\");\n        }\n      }\n      if (this.getFontWeight()) {\n        styleMap.fontWeight = this.getFontWeight();\n      }\n      if (this.getFontStyle()) {\n        styleMap.fontStyle = this.getFontStyle();\n      }\n\n      var elem = document.createElement(\"span\");\n      elem.innerHTML =\n        comparisonString || qx.bom.webfonts.Validator.COMPARISON_STRING;\n      qx.bom.element.Style.setStyles(elem, styleMap);\n      document.body.appendChild(elem);\n      return elem;\n    },\n\n    // property apply\n    _applyFontFamily(value, old) {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n    // property apply\n    _applyFontWeight(value, old) {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n    // property apply\n    _applyFontStyle(value, old) {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Creates the default helper elements and gets their widths\n     */\n    __init() {\n      var cls = qx.bom.webfonts.Validator;\n      if (!cls.__defaultHelpers) {\n        cls.__defaultHelpers = {\n          sans: this._getHelperElement(cls.COMPARISON_FONTS.sans),\n          serif: this._getHelperElement(cls.COMPARISON_FONTS.serif)\n        };\n      }\n\n      cls.__defaultSizes = {\n        sans: qx.bom.element.Dimension.getWidth(cls.__defaultHelpers.sans),\n        serif: qx.bom.element.Dimension.getWidth(cls.__defaultHelpers.serif)\n      };\n    },\n\n    /**\n     * Triggers helper element size comparison and fires a ({@link #changeStatus})\n     * event with the result.\n     */\n    __onTimerInterval() {\n      if (this._isFontValid()) {\n        this.__checkTimer.stop();\n        this._reset();\n        this.fireDataEvent(\"changeStatus\", {\n          family: this.getFontFamily(),\n          valid: true\n        });\n      } else {\n        var now = new Date().getTime();\n        if (now - this.__checkStarted >= this.getTimeout()) {\n          this.__checkTimer.stop();\n          this._reset();\n          this.fireDataEvent(\"changeStatus\", {\n            family: this.getFontFamily(),\n            valid: false\n          });\n        }\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._reset();\n    this.__checkTimer.stop();\n    this.__checkTimer.removeListener(\"interval\", this.__onTimerInterval, this);\n    this._disposeObjects(\"__checkTimer\");\n  }\n});\n"
  ],
  "mappings": "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"
}